<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	
		<description>Shiro和Spring继承  http://shiro.apache.org/spring.html</description>
		
		
		<!-- shiro缓存管理器 
			<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" /> 
		-->
		<!-- spring缓存管理器 -->
	    <bean id="cacheManager" class="cn.com.zygx.backFramework.spring.SpringCacheManagerWrapper">
	        <property name="cacheManager" ref="springCacheManager"/>
	    </bean>
		
		
		<!-- UrlPermissionReslover -->
		<bean id="urlPermissionResolver" class="cn.com.zygx.backFramework.permission.UrlPermissionResolver"></bean>
		
		<!-- 凭证匹配器 -->
		<bean id="hashMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
			<property name="hashAlgorithmName" value="md5"/>
			<property name="hashIterations" value="2"/> <!--生成Hash值的迭代次数   -->
			<property name="storedCredentialsHexEncoded" value="true"/>
		</bean>
	
		<!-- UserRealm -->
		<bean id="userRealm" class="cn.com.zygx.backFramework.shiro.realm.UserRealm">
			<property name="cachingEnabled" value="true" />
			<!-- 认证缓存 -->
	    	<property name="authenticationCachingEnabled" value="true" />
	    	<property name="authenticationCacheName" value="shiro-authenticationCache" />
	    	<!-- 授权缓存配置 -->
	    	<property name="authorizationCachingEnabled" value="true"/>
	    	<property name="authorizationCacheName" value="shiro-authorizationCache" />
			<property name="credentialsMatcher" ref="hashMatcher"/>
		</bean>
		
		<!-- 对外服务的realm,此处禁用缓存配置，因为开启后用户的权限不会自动同步到缓存中 -->
		<bean id="remoteRealm" class="cn.com.zygx.backFramework.shiro.realm.RemoteRealm"></bean>
		
		
		<!-- 会话ID生成器 -->
   		<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    
		<!-- 会话DAO,shiro提供了ehcache支持企业的会话缓存，可以自己定义DAO，将会话保存到MYSQL或者redis等等 -->
	    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
	        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
	        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	    </bean>
	    <!-- 会话持久话到数据库 
		    <bean id="mySessionDAO" class="cn.com.zygx.backFramework.dao.MySessionDAO"></bean>
	    -->
    
		<!-- 会话验证调度器，默认半个小时调度一次 -->  
		<bean id="sessionValidationScheduler"  class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">  
		    <property name="sessionValidationInterval" value="1800000"/>  
		    <property name="sessionManager" ref="sessionManager"/>  
		</bean> 
		
		<!-- 会话Cookie模板，httpOnly如果设置为true，则客户端不会暴露给客户端脚本代码 ，有助于减少某些类型的跨站点脚本攻击-->  
		<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
		    <constructor-arg value="sid"/>  
		    <property name="httpOnly" value="true"/>  
		   <property name="maxAge" value="1800"/> 
		</bean>
		
		<!--登录页面的记住我Cookie模板 -->
		<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
			<constructor-arg value="rememberMe"/>
			<property name="httpOnly" value="true"/>
			<property name="maxAge" value="604800"/><!-- 单位秒 一周 -->
		</bean>
		<!-- remberMe管理器 cipherKey是加密rememberMe Cookie的密钥；默认AES算法；-->
		<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		   	<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
			<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
			<property name="cookie" ref="rememberMeCookie"></property>
		</bean>
		
		<!-- WEB下会话管理器，直接取代servlet容器的session -->  
		<bean id="sessionManager"  class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">  
		    <property name="globalSessionTimeout" value="1800000"/>  <!-- 单位毫秒--> 
		    <property name="deleteInvalidSessions" value="true"/>  
		    <property name="sessionValidationSchedulerEnabled" value="true"/>  
		    <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
		    <property name="sessionDAO" ref="sessionDAO"/>  
		    <property name="sessionIdCookieEnabled" value="true"/>  
		    <property name="sessionIdCookie" ref="sessionIdCookie"/>  
		</bean>  

	
		<!-- 安全管理器securityManager -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<property name="authenticator" ref="defineModularRealmAuthenticator"/>
			<property name="realms">
				<list>
					<!-- userRealm当前系统realm,remoteRealm对外服务的realm -->
					<ref bean="userRealm"/>
					<ref bean="remoteRealm"/>
				</list>
			</property>
	    	<property name="rememberMeManager" ref="rememberMeManager"/>
	    	<property name="sessionManager" ref="sessionManager"/>
	    	<property name="cacheManager" ref="cacheManager" />
	    	<property name="authorizer.permissionResolver" ref="urlPermissionResolver" />
		</bean>
		
		<!-- 自定义多个realm授权器 -->
		<bean id="defineModularRealmAuthenticator" class="cn.com.zygx.backFramework.shiro.realm.DefaultModularRealm">
			<property name="definedRealms">
				<map>
					<entry key="userRealm" value-ref="userRealm"/>
					<entry key="remoteRealm" value-ref="remoteRealm"/>
				</map>
			</property>
			<property name="authenticationStrategy">
				<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>
			</property>
		</bean>
		
		<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	        <property name="arguments" ref="securityManager"/>
	    </bean>
    
		
		<!-- 认证授权过滤器    loginUrl配置的是登陆的首页地址 -->
		<bean id="resourcesCheckFilter" class="cn.com.zygx.backFramework.filter.ResourcesCheckFilter">
			<property name="errorUrl" value="/unauth"/>
		</bean>	
		
		<!-- 基于Form表单的身份验证过滤器<本系统登录表单>,loginUrl支持servlet请求和Ajax请求-->	
		<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
			<property name="usernameParam" value="username"/>
			<property name="passwordParam" value="password" />
			<property name="rememberMeParam" value="rememberMe"/>
			<property name="loginUrl"  value="/login"/>
		</bean>
		
		 <!-- 基于Form表单的身份验证过滤器<远程服务表单> -->
	    <bean id="remoteFormAuthenticationFilter" class="cn.com.zygx.backFramework.filter.ServerFormAuthenticationFilter">
	        <property name="usernameParam" value="username"/>
	        <property name="passwordParam" value="password"/>
	        <property name="rememberMeParam" value="rememberMe"/>
	    </bean>
		
		<!-- 并发踢出用户过滤器 -->
		 <bean id="kickoutSessionControlFilter" class="cn.com.zygx.backFramework.filter.KickoutSessionControllerFilter">
	        <property name="cacheManager" ref="cacheManager"/>
	        <property name="sessionManager" ref="sessionManager"/>
	
	        <property name="kickoutAfter" value="false"/>
	        <property name="maxSession" value="1"/>
	        <property name="kickoutUrl" value="/login?kickout=1"/>
  	 	 </bean>
		
		<!-- 会话管理过滤器，后台强制登出某个用户 -->	
		<bean id="forceLogoutFilter" class="cn.com.zygx.backFramework.filter.ForceLogoutFilter"></bean>	
		
		<!-- Shiro的Web过滤器 -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		    <property name="securityManager" ref="securityManager"/>
		    <property name="loginUrl" value="/login" />
		    <!-- override these for application-specific URLs if you like:
		    <property name="loginUrl" value="/login.jsp"/>
		    <property name="successUrl" value="/home.jsp"/>
		    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
		    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
		    <!-- defined will be automatically acquired and available via its beanName in chain        -->
		    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
		    <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="authc" value-ref="remoteFormAuthenticationFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
                <entry key="forceLogout" value-ref="forceLogoutFilter"/>
            </util:map>
            </property>
		    <property name="filterChainDefinitions">
		        <value>
		        	<!-- 登录注册配置 -->
					/login=anon
					/logout=logout
					
					<!-- OAuth2配置 -->
					/authorize=anon  
				    /accessToken=anon  
				    /userInfo=anon
				    
				    <!-- 远程服务 -->
	      			/remoteService = anon
	      			
	      			<!-- 认证授权配置 /user标识授权或者remeberMe的都允许访问 -->
					/admin/index=authc
					/admin/welcome=user
			        /admin/**=user,resourcesCheckFilter,kickout,forceLogout
		        </value>
		    </property>
		</bean>
		
		<!-- 生命周期 -->
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
		
		<!--shiro 注解支持 the lifecycleBeanProcessor has run: -->
	   <!--  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		    <property name="securityManager"  ref="securityManager"/>
		</bean> -->
</beans>