<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
		xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
>

	<description>数据库配置(写)</description>
	<!-- 引入多个配置文件交给spring管理-->
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:druid.properties</value>
                 <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"></property>
    </bean>
	
	<!-- c3p0高并发数据配置 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		配置连接池属性
		<property name="driverClass" value="${driver_write}"></property>	
		<property name="jdbcUrl" value="${url_write}"></property>	
		<property name="user" value="${username_write}" ></property>	
		<property name="password" value="${password_write}"></property>	
		c3p0的私有属性
		<property name="acquireIncrement" value="${acquireIncrement_write}"></property>
		<property name="initialPoolSize" value="${initialPoolSize_write}"></property>
	    <property name="maxIdleTime" value="${maxIdleTime_write}"></property>
	    <property name="maxPoolSize" value="${maxPoolSize_write}"></property>
	    <property name="minPoolSize" value="${minPoolSize_write}"></property>
	    检查连接池空闲数的时间
	    <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod_write}"></property>
		当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限
		<property name="checkoutTimeout" value="${checkoutTimeout_write}"></property>
		当获取连接失败重复的次数
		<property name="acquireRetryAttempts" value="${acquireRetryAttempts_write}"></property>
		两次连接之间的时间间隔，单位毫秒
		<property name="acquireRetryDelay" value="${acquireRetryDelay_write}"></property>
		连接关闭时默认将所有未提交的操作回滚
		<property name="autoCommitOnClose" value="false"></property>
		如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		<property name="maxStatements" value="${maxStatements_write}"></property>
		maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0
		<property name="maxStatementsPerConnection" value="${maxStatementsPerConnection_write}"></property>
	</bean> -->
	
	<!-- 阿里巴巴durid数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
    <!-- 基本属性dirver（可配可不配）、 url、user、password -->  
    <property name="driverClassName" value="${driver}"></property>
    <property name="url" value="${url}" />  
    <property name="username" value="${username}" />  
    <property name="password" value="${password}" />  
        
    <!-- 配置初始化大小、最小、最大 -->  
    <property name="initialSize" value="${initialSize}" />  
    <property name="minIdle" value="${minIdle}" />   
    <property name="maxActive" value="${maxActive}" />  
   
    <!-- 配置获取连接等待超时的时间 -->  
    <property name="maxWait" value="${maxWait}" />  
   
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
    <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />  
   
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
    <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
    
    <property name="validationQuery" value="SELECT 'x'" />  
    <property name="testWhileIdle" value="true" />  
    <property name="testOnBorrow" value="false" />  
    <property name="testOnReturn" value="false" />  
   
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
    <property name="poolPreparedStatements" value="true" />  
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />  
   
    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
    <property name="filters" value="stat" />   
</bean> 
	
	<!-- MyBatis与Spring的整合-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="cn.com.zygx.backFramework.model" />
		<!-- 显式指定Mapper所有模块的文件夹下的所有映射文件 -->
		<property name="mapperLocations" value="classpath:/mybatis/*/*Mapper.xml" />
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的接口,自动实现dao接口，并注入到spring容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="cn.com.zygx.backFramework.dao" />
	<property name="annotationClass" value="cn.com.zygx.backFramework.db.mybatis.MyBatisRepository"/>
	<property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/>
    </bean>
    
    <!-- 定义事务管理 器-->
	<bean id="transactionManagerWrite"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="backFramework"/>
	</bean> 

	<!-- 使用annotation控制事务 -->
	<tx:annotation-driven transaction-manager="transactionManagerWrite"  proxy-target-class="true"/>
</beans>